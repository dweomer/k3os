/*
Copyright 2019 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by codegen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/k3os/pkg/apis/k3os.io/v1"
	clientset "github.com/rancher/k3os/pkg/generated/clientset/versioned/typed/k3os.io/v1"
	informers "github.com/rancher/k3os/pkg/generated/informers/externalversions/k3os.io/v1"
	listers "github.com/rancher/k3os/pkg/generated/listers/k3os.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ChannelHandler func(string, *v1.Channel) (*v1.Channel, error)

type ChannelController interface {
	generic.ControllerMeta
	ChannelClient

	OnChange(ctx context.Context, name string, sync ChannelHandler)
	OnRemove(ctx context.Context, name string, sync ChannelHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ChannelCache
}

type ChannelClient interface {
	Create(*v1.Channel) (*v1.Channel, error)
	Update(*v1.Channel) (*v1.Channel, error)
	UpdateStatus(*v1.Channel) (*v1.Channel, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Channel, error)
	List(namespace string, opts metav1.ListOptions) (*v1.ChannelList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Channel, err error)
}

type ChannelCache interface {
	Get(namespace, name string) (*v1.Channel, error)
	List(namespace string, selector labels.Selector) ([]*v1.Channel, error)

	AddIndexer(indexName string, indexer ChannelIndexer)
	GetByIndex(indexName, key string) ([]*v1.Channel, error)
}

type ChannelIndexer func(obj *v1.Channel) ([]string, error)

type channelController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ChannelsGetter
	informer          informers.ChannelInformer
	gvk               schema.GroupVersionKind
}

func NewChannelController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ChannelsGetter, informer informers.ChannelInformer) ChannelController {
	return &channelController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromChannelHandlerToHandler(sync ChannelHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Channel
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Channel))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *channelController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Channel))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateChannelDeepCopyOnChange(client ChannelClient, obj *v1.Channel, handler func(obj *v1.Channel) (*v1.Channel, error)) (*v1.Channel, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *channelController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *channelController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *channelController) OnChange(ctx context.Context, name string, sync ChannelHandler) {
	c.AddGenericHandler(ctx, name, FromChannelHandlerToHandler(sync))
}

func (c *channelController) OnRemove(ctx context.Context, name string, sync ChannelHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromChannelHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *channelController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *channelController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *channelController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *channelController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *channelController) Cache() ChannelCache {
	return &channelCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *channelController) Create(obj *v1.Channel) (*v1.Channel, error) {
	return c.clientGetter.Channels(obj.Namespace).Create(obj)
}

func (c *channelController) Update(obj *v1.Channel) (*v1.Channel, error) {
	return c.clientGetter.Channels(obj.Namespace).Update(obj)
}

func (c *channelController) UpdateStatus(obj *v1.Channel) (*v1.Channel, error) {
	return c.clientGetter.Channels(obj.Namespace).UpdateStatus(obj)
}

func (c *channelController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Channels(namespace).Delete(name, options)
}

func (c *channelController) Get(namespace, name string, options metav1.GetOptions) (*v1.Channel, error) {
	return c.clientGetter.Channels(namespace).Get(name, options)
}

func (c *channelController) List(namespace string, opts metav1.ListOptions) (*v1.ChannelList, error) {
	return c.clientGetter.Channels(namespace).List(opts)
}

func (c *channelController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Channels(namespace).Watch(opts)
}

func (c *channelController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Channel, err error) {
	return c.clientGetter.Channels(namespace).Patch(name, pt, data, subresources...)
}

type channelCache struct {
	lister  listers.ChannelLister
	indexer cache.Indexer
}

func (c *channelCache) Get(namespace, name string) (*v1.Channel, error) {
	return c.lister.Channels(namespace).Get(name)
}

func (c *channelCache) List(namespace string, selector labels.Selector) ([]*v1.Channel, error) {
	return c.lister.Channels(namespace).List(selector)
}

func (c *channelCache) AddIndexer(indexName string, indexer ChannelIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Channel))
		},
	}))
}

func (c *channelCache) GetByIndex(indexName, key string) (result []*v1.Channel, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.Channel))
	}
	return result, nil
}

type ChannelStatusHandler func(obj *v1.Channel, status v1.ChannelStatus) (v1.ChannelStatus, error)

type ChannelGeneratingHandler func(obj *v1.Channel, status v1.ChannelStatus) ([]runtime.Object, v1.ChannelStatus, error)

func RegisterChannelStatusHandler(ctx context.Context, controller ChannelController, condition condition.Cond, name string, handler ChannelStatusHandler) {
	statusHandler := &channelStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromChannelHandlerToHandler(statusHandler.sync))
}

func RegisterChannelGeneratingHandler(ctx context.Context, controller ChannelController, apply apply.Apply,
	condition condition.Cond, name string, handler ChannelGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &channelGeneratingHandler{
		ChannelGeneratingHandler: handler,
		apply:                    apply,
		name:                     name,
		gvk:                      controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterChannelStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type channelStatusHandler struct {
	client    ChannelClient
	condition condition.Cond
	handler   ChannelStatusHandler
}

func (a *channelStatusHandler) sync(key string, obj *v1.Channel) (*v1.Channel, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type channelGeneratingHandler struct {
	ChannelGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *channelGeneratingHandler) Handle(obj *v1.Channel, status v1.ChannelStatus) (v1.ChannelStatus, error) {
	objs, newStatus, err := a.ChannelGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
