/*
Copyright 2019 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by codegen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/k3os/pkg/apis/k3os.io/v1"
	clientset "github.com/rancher/k3os/pkg/generated/clientset/versioned/typed/k3os.io/v1"
	informers "github.com/rancher/k3os/pkg/generated/informers/externalversions/k3os.io/v1"
	listers "github.com/rancher/k3os/pkg/generated/listers/k3os.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type UpgradeSetHandler func(string, *v1.UpgradeSet) (*v1.UpgradeSet, error)

type UpgradeSetController interface {
	generic.ControllerMeta
	UpgradeSetClient

	OnChange(ctx context.Context, name string, sync UpgradeSetHandler)
	OnRemove(ctx context.Context, name string, sync UpgradeSetHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() UpgradeSetCache
}

type UpgradeSetClient interface {
	Create(*v1.UpgradeSet) (*v1.UpgradeSet, error)
	Update(*v1.UpgradeSet) (*v1.UpgradeSet, error)
	UpdateStatus(*v1.UpgradeSet) (*v1.UpgradeSet, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.UpgradeSet, error)
	List(namespace string, opts metav1.ListOptions) (*v1.UpgradeSetList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.UpgradeSet, err error)
}

type UpgradeSetCache interface {
	Get(namespace, name string) (*v1.UpgradeSet, error)
	List(namespace string, selector labels.Selector) ([]*v1.UpgradeSet, error)

	AddIndexer(indexName string, indexer UpgradeSetIndexer)
	GetByIndex(indexName, key string) ([]*v1.UpgradeSet, error)
}

type UpgradeSetIndexer func(obj *v1.UpgradeSet) ([]string, error)

type upgradeSetController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.UpgradeSetsGetter
	informer          informers.UpgradeSetInformer
	gvk               schema.GroupVersionKind
}

func NewUpgradeSetController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.UpgradeSetsGetter, informer informers.UpgradeSetInformer) UpgradeSetController {
	return &upgradeSetController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromUpgradeSetHandlerToHandler(sync UpgradeSetHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.UpgradeSet
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.UpgradeSet))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *upgradeSetController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.UpgradeSet))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateUpgradeSetDeepCopyOnChange(client UpgradeSetClient, obj *v1.UpgradeSet, handler func(obj *v1.UpgradeSet) (*v1.UpgradeSet, error)) (*v1.UpgradeSet, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *upgradeSetController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *upgradeSetController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *upgradeSetController) OnChange(ctx context.Context, name string, sync UpgradeSetHandler) {
	c.AddGenericHandler(ctx, name, FromUpgradeSetHandlerToHandler(sync))
}

func (c *upgradeSetController) OnRemove(ctx context.Context, name string, sync UpgradeSetHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromUpgradeSetHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *upgradeSetController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *upgradeSetController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *upgradeSetController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *upgradeSetController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *upgradeSetController) Cache() UpgradeSetCache {
	return &upgradeSetCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *upgradeSetController) Create(obj *v1.UpgradeSet) (*v1.UpgradeSet, error) {
	return c.clientGetter.UpgradeSets(obj.Namespace).Create(obj)
}

func (c *upgradeSetController) Update(obj *v1.UpgradeSet) (*v1.UpgradeSet, error) {
	return c.clientGetter.UpgradeSets(obj.Namespace).Update(obj)
}

func (c *upgradeSetController) UpdateStatus(obj *v1.UpgradeSet) (*v1.UpgradeSet, error) {
	return c.clientGetter.UpgradeSets(obj.Namespace).UpdateStatus(obj)
}

func (c *upgradeSetController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.UpgradeSets(namespace).Delete(name, options)
}

func (c *upgradeSetController) Get(namespace, name string, options metav1.GetOptions) (*v1.UpgradeSet, error) {
	return c.clientGetter.UpgradeSets(namespace).Get(name, options)
}

func (c *upgradeSetController) List(namespace string, opts metav1.ListOptions) (*v1.UpgradeSetList, error) {
	return c.clientGetter.UpgradeSets(namespace).List(opts)
}

func (c *upgradeSetController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.UpgradeSets(namespace).Watch(opts)
}

func (c *upgradeSetController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.UpgradeSet, err error) {
	return c.clientGetter.UpgradeSets(namespace).Patch(name, pt, data, subresources...)
}

type upgradeSetCache struct {
	lister  listers.UpgradeSetLister
	indexer cache.Indexer
}

func (c *upgradeSetCache) Get(namespace, name string) (*v1.UpgradeSet, error) {
	return c.lister.UpgradeSets(namespace).Get(name)
}

func (c *upgradeSetCache) List(namespace string, selector labels.Selector) ([]*v1.UpgradeSet, error) {
	return c.lister.UpgradeSets(namespace).List(selector)
}

func (c *upgradeSetCache) AddIndexer(indexName string, indexer UpgradeSetIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.UpgradeSet))
		},
	}))
}

func (c *upgradeSetCache) GetByIndex(indexName, key string) (result []*v1.UpgradeSet, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.UpgradeSet))
	}
	return result, nil
}

type UpgradeSetStatusHandler func(obj *v1.UpgradeSet, status v1.UpgradeSetStatus) (v1.UpgradeSetStatus, error)

type UpgradeSetGeneratingHandler func(obj *v1.UpgradeSet, status v1.UpgradeSetStatus) ([]runtime.Object, v1.UpgradeSetStatus, error)

func RegisterUpgradeSetStatusHandler(ctx context.Context, controller UpgradeSetController, condition condition.Cond, name string, handler UpgradeSetStatusHandler) {
	statusHandler := &upgradeSetStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromUpgradeSetHandlerToHandler(statusHandler.sync))
}

func RegisterUpgradeSetGeneratingHandler(ctx context.Context, controller UpgradeSetController, apply apply.Apply,
	condition condition.Cond, name string, handler UpgradeSetGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &upgradeSetGeneratingHandler{
		UpgradeSetGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterUpgradeSetStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type upgradeSetStatusHandler struct {
	client    UpgradeSetClient
	condition condition.Cond
	handler   UpgradeSetStatusHandler
}

func (a *upgradeSetStatusHandler) sync(key string, obj *v1.UpgradeSet) (*v1.UpgradeSet, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type upgradeSetGeneratingHandler struct {
	UpgradeSetGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *upgradeSetGeneratingHandler) Handle(obj *v1.UpgradeSet, status v1.UpgradeSetStatus) (v1.UpgradeSetStatus, error) {
	objs, newStatus, err := a.UpgradeSetGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
