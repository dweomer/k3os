/*
Copyright 2019 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by codegen. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/k3os/pkg/apis/k3os.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeSetLister helps list UpgradeSets.
type UpgradeSetLister interface {
	// List lists all UpgradeSets in the indexer.
	List(selector labels.Selector) (ret []*v1.UpgradeSet, err error)
	// UpgradeSets returns an object that can list and get UpgradeSets.
	UpgradeSets(namespace string) UpgradeSetNamespaceLister
	UpgradeSetListerExpansion
}

// upgradeSetLister implements the UpgradeSetLister interface.
type upgradeSetLister struct {
	indexer cache.Indexer
}

// NewUpgradeSetLister returns a new UpgradeSetLister.
func NewUpgradeSetLister(indexer cache.Indexer) UpgradeSetLister {
	return &upgradeSetLister{indexer: indexer}
}

// List lists all UpgradeSets in the indexer.
func (s *upgradeSetLister) List(selector labels.Selector) (ret []*v1.UpgradeSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpgradeSet))
	})
	return ret, err
}

// UpgradeSets returns an object that can list and get UpgradeSets.
func (s *upgradeSetLister) UpgradeSets(namespace string) UpgradeSetNamespaceLister {
	return upgradeSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeSetNamespaceLister helps list and get UpgradeSets.
type UpgradeSetNamespaceLister interface {
	// List lists all UpgradeSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.UpgradeSet, err error)
	// Get retrieves the UpgradeSet from the indexer for a given namespace and name.
	Get(name string) (*v1.UpgradeSet, error)
	UpgradeSetNamespaceListerExpansion
}

// upgradeSetNamespaceLister implements the UpgradeSetNamespaceLister
// interface.
type upgradeSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpgradeSets in the indexer for a given namespace.
func (s upgradeSetNamespaceLister) List(selector labels.Selector) (ret []*v1.UpgradeSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpgradeSet))
	})
	return ret, err
}

// Get retrieves the UpgradeSet from the indexer for a given namespace and name.
func (s upgradeSetNamespaceLister) Get(name string) (*v1.UpgradeSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("upgradeset"), name)
	}
	return obj.(*v1.UpgradeSet), nil
}
